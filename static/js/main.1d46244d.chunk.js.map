{"version":3,"sources":["Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","state","displayScreen","clearFunction","_this","setState","react_default","a","createElement","id","this","onClick","className","Component","App","props","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","display","output","Calculator_Calculator","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"yNAEqBA,oNACnBC,MAAQ,CACNC,cAAe,KAGjBC,cAAgB,WACdC,EAAKC,SAAS,CACZH,cAAe,6EAKjB,OACEI,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,eAEEF,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACNH,EAAAC,EAAAC,cAAA,QAAMC,GAAG,WAAWC,KAAKT,MAAMC,eAC/BI,EAAAC,EAAAC,cAAA,UAAQC,GAAG,QAAQE,QAASD,KAAKP,eAAjC,MAGAG,EAAAC,EAAAC,cAAA,UAAQI,UAAU,WAAWH,GAAG,UAAhC,KAGAH,EAAAC,EAAAC,cAAA,UAAQI,UAAU,WAAWH,GAAG,YAAhC,KAGAH,EAAAC,EAAAC,cAAA,UAAQI,UAAU,MAAMH,GAAG,SAA3B,KAGAH,EAAAC,EAAAC,cAAA,UAAQI,UAAU,MAAMH,GAAG,SAA3B,KAGAH,EAAAC,EAAAC,cAAA,UAAQI,UAAU,MAAMH,GAAG,QAA3B,KAGAH,EAAAC,EAAAC,cAAA,UAAQI,UAAU,WAAWH,GAAG,YAAhC,KAGAH,EAAAC,EAAAC,cAAA,UAAQI,UAAU,MAAMH,GAAG,QAA3B,KAGAH,EAAAC,EAAAC,cAAA,UAAQI,UAAU,MAAMH,GAAG,QAA3B,KAGAH,EAAAC,EAAAC,cAAA,UAAQI,UAAU,MAAMH,GAAG,OAA3B,KAGAH,EAAAC,EAAAC,cAAA,UAAQI,UAAU,WAAWH,GAAG,OAAhC,KAGAH,EAAAC,EAAAC,cAAA,UAAQI,UAAU,MAAMH,GAAG,OAA3B,KAGAH,EAAAC,EAAAC,cAAA,UAAQI,UAAU,MAAMH,GAAG,OAA3B,KAGAH,EAAAC,EAAAC,cAAA,UAAQI,UAAU,MAAMH,GAAG,SAA3B,KAGAH,EAAAC,EAAAC,cAAA,UAAQI,UAAU,WAAWH,GAAG,UAAhC,KAGAH,EAAAC,EAAAC,cAAA,UAAQI,UAAU,MAAMH,GAAG,QAA3B,KAGAH,EAAAC,EAAAC,cAAA,UAAQI,UAAU,WAAWH,GAAG,WAAhC,eAlE4BI,cCqBzBC,cAlBb,SAAAA,EAAYC,GAAO,IAAAX,EAAA,OAAAY,OAAAC,EAAA,EAAAD,CAAAN,KAAAI,IACjBV,EAAAY,OAAAE,EAAA,EAAAF,CAAAN,KAAAM,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAV,KAAMK,KACDd,MAAQ,CACXoB,QAAS,EACTC,OAAQ,GAJOlB,wEASjB,OACEE,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAAA,MAAIC,GAAG,aAAP,cACAH,EAAAC,EAAAC,cAACe,EAAD,cAbUV,aCQZW,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBtC,QACfgC,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,UAO5BU,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KC1FjEC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,cAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,OAAQ,WAC9B,IAAM3B,EAAK,GAAA4B,OAAMJ,cAAN,sBAEP/B,GAgEV,SAAiCO,EAAOC,GAEtC4B,MAAM7B,GACHK,KAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,KAAK,SAAAC,GACjCA,EAAa+B,aAAahC,KAAK,WAC7BV,OAAOC,SAAS0C,aAKpBvC,EAAgBC,EAAOC,KAG1Be,MAAM,WACLJ,QAAQC,IACN,mEArFA0B,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,KAAK,WACjCO,QAAQC,IACN,gHAMJd,EAAgBC,EAAOC,MCvC/BE","file":"static/js/main.1d46244d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class Calculator extends Component {\r\n  state = {\r\n    displayScreen: 0\r\n  };\r\n\r\n  clearFunction = () => {\r\n    this.setState({\r\n      displayScreen: 0\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <section>\r\n          {/* <h2>Some Heading</h2> */}\r\n          <div id=\"container\">\r\n            <span id=\"display\">{this.state.displayScreen}</span>\r\n            <button id=\"clear\" onClick={this.clearFunction}>\r\n              AC\r\n            </button>\r\n            <button className=\"operator\" id=\"divide\">\r\n              /\r\n            </button>\r\n            <button className=\"operator\" id=\"multiply\">\r\n              x\r\n            </button>\r\n            <button className=\"num\" id=\"seven\">\r\n              7\r\n            </button>\r\n            <button className=\"num\" id=\"eight\">\r\n              8\r\n            </button>\r\n            <button className=\"num\" id=\"nine\">\r\n              9\r\n            </button>\r\n            <button className=\"operator\" id=\"subtract\">\r\n              -\r\n            </button>\r\n            <button className=\"num\" id=\"four\">\r\n              4\r\n            </button>\r\n            <button className=\"num\" id=\"five\">\r\n              5\r\n            </button>\r\n            <button className=\"num\" id=\"six\">\r\n              6\r\n            </button>\r\n            <button className=\"operator\" id=\"add\">\r\n              +\r\n            </button>\r\n            <button className=\"num\" id=\"one\">\r\n              1\r\n            </button>\r\n            <button className=\"num\" id=\"two\">\r\n              2\r\n            </button>\r\n            <button className=\"num\" id=\"three\">\r\n              3\r\n            </button>\r\n            <button className=\"operator\" id=\"equals\">\r\n              =\r\n            </button>\r\n            <button className=\"num\" id=\"zero\">\r\n              0\r\n            </button>\r\n            <button className=\"operator\" id=\"decimal\">\r\n              .\r\n            </button>\r\n          </div>\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Calculator from \"./Calculator\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: 0,\n      output: 0\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 id=\"app-title\">Calculator</h1>\n        <Calculator />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}